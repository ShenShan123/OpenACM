/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module ACCI1(a, b, c, d, S, C);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  output C;
  output S;
  input a;
  input b;
  input c;
  input d;
  NAND3_X1 _21_ (
    .A1(_03_),
    .A2(_02_),
    .A3(_04_),
    .ZN(_09_)
  );
  XOR2_X1 _22_ (
    .A(_03_),
    .B(_02_),
    .Z(_10_)
  );
  XOR2_X1 _23_ (
    .A(_04_),
    .B(_05_),
    .Z(_11_)
  );
  NAND2_X1 _24_ (
    .A1(_10_),
    .A2(_11_),
    .ZN(_06_)
  );
  XNOR2_X1 _25_ (
    .A(_10_),
    .B(_11_),
    .ZN(_07_)
  );
  NAND2_X1 _26_ (
    .A1(_09_),
    .A2(_07_),
    .ZN(_01_)
  );
  AOI22_X1 _27_ (
    .A1(_03_),
    .A2(_02_),
    .B1(_04_),
    .B2(_05_),
    .ZN(_08_)
  );
  NAND2_X1 _28_ (
    .A1(_06_),
    .A2(_08_),
    .ZN(_00_)
  );
  assign _03_ = b;
  assign _02_ = a;
  assign _04_ = c;
  assign _05_ = d;
  assign S = _01_;
  assign C = _00_;
endmodule

module Appro4_2_8bit(N1, N2, P_APPROX);
  input [7:0] N1;
  input [7:0] N2;
  output [15:0] P_APPROX;
  wire pp_0;
  wire [1:0] pp_1;
  wire [3:0] pp_10;
  wire [3:0] pp_11;
  wire [3:0] pp_12;
  wire [1:0] pp_13;
  wire pp_14;
  wire [2:0] pp_2;
  wire [3:0] pp_3;
  wire [3:0] pp_4;
  wire [3:0] pp_5;
  wire [3:0] pp_6;
  wire [3:0] pp_7;
  wire [3:0] pp_8;
  wire [3:0] pp_9;
  STAGE1 STAGE1 (
    .A(N1),
    .B(N2),
    .pp_0(pp_0),
    .pp_1(pp_1),
    .pp_10(pp_10),
    .pp_11(pp_11),
    .pp_12(pp_12),
    .pp_13(pp_13),
    .pp_14(pp_14),
    .pp_2(pp_2),
    .pp_3(pp_3),
    .pp_4(pp_4),
    .pp_5(pp_5),
    .pp_6(pp_6),
    .pp_7(pp_7),
    .pp_8(pp_8),
    .pp_9(pp_9)
  );
  STAGE2 STAGE2 (
    .approx(P_APPROX),
    .pp_0(pp_0),
    .pp_1(pp_1),
    .pp_10(pp_10),
    .pp_11(pp_11),
    .pp_12(pp_12),
    .pp_13(pp_13),
    .pp_14(pp_14),
    .pp_2(pp_2),
    .pp_3(pp_3),
    .pp_4(pp_4),
    .pp_5(pp_5),
    .pp_6(pp_6),
    .pp_7(pp_7),
    .pp_8(pp_8),
    .pp_9(pp_9)
  );
endmodule

module CLA16bit(A, B, Cin, Sum, Cout);
  input [15:0] A;
  input [15:0] B;
  input Cin;
  output Cout;
  output [15:0] Sum;
  wire c1;
  wire c2;
  wire c3;
  CLA4bit cla1 (
    .A(A[3:0]),
    .B(B[3:0]),
    .Cin(Cin),
    .Cout(c1),
    .Sum(Sum[3:0])
  );
  CLA4bit cla2 (
    .A(A[7:4]),
    .B(B[7:4]),
    .Cin(c1),
    .Cout(c2),
    .Sum(Sum[7:4])
  );
  CLA4bit cla3 (
    .A(A[11:8]),
    .B(B[11:8]),
    .Cin(c2),
    .Cout(c3),
    .Sum(Sum[11:8])
  );
  CLA4bit cla4 (
    .A(A[15:12]),
    .B(B[15:12]),
    .Cin(c3),
    .Cout(Cout),
    .Sum(Sum[15:12])
  );
endmodule

module CLA4bit(A, B, Cin, Sum, Cout);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  input [3:0] A;
  input [3:0] B;
  wire [3:0] C;
  input Cin;
  output Cout;
  output [3:0] Sum;
  NAND2_X1 _40_ (
    .A1(_07_),
    .A2(_03_),
    .ZN(_14_)
  );
  AND2_X1 _41_ (
    .A1(_06_),
    .A2(_02_),
    .ZN(_15_)
  );
  NAND2_X1 _42_ (
    .A1(_05_),
    .A2(_01_),
    .ZN(_16_)
  );
  AND2_X1 _43_ (
    .A1(_04_),
    .A2(_00_),
    .ZN(_17_)
  );
  OR2_X1 _44_ (
    .A1(_04_),
    .A2(_00_),
    .ZN(_18_)
  );
  XNOR2_X1 _45_ (
    .A(_04_),
    .B(_00_),
    .ZN(_19_)
  );
  AOI21_X1 _46_ (
    .A(_17_),
    .B1(_18_),
    .B2(_08_),
    .ZN(_20_)
  );
  NOR2_X1 _47_ (
    .A1(_05_),
    .A2(_01_),
    .ZN(_21_)
  );
  XOR2_X1 _48_ (
    .A(_05_),
    .B(_01_),
    .Z(_22_)
  );
  OAI21_X1 _49_ (
    .A(_16_),
    .B1(_20_),
    .B2(_21_),
    .ZN(_23_)
  );
  OR2_X1 _50_ (
    .A1(_06_),
    .A2(_02_),
    .ZN(_24_)
  );
  XNOR2_X1 _51_ (
    .A(_06_),
    .B(_02_),
    .ZN(_25_)
  );
  AOI21_X1 _52_ (
    .A(_15_),
    .B1(_23_),
    .B2(_24_),
    .ZN(_26_)
  );
  NOR2_X1 _53_ (
    .A1(_07_),
    .A2(_03_),
    .ZN(_27_)
  );
  XOR2_X1 _54_ (
    .A(_07_),
    .B(_03_),
    .Z(_28_)
  );
  OAI21_X1 _55_ (
    .A(_14_),
    .B1(_26_),
    .B2(_27_),
    .ZN(_09_)
  );
  XNOR2_X1 _56_ (
    .A(_08_),
    .B(_19_),
    .ZN(_10_)
  );
  XNOR2_X1 _57_ (
    .A(_20_),
    .B(_22_),
    .ZN(_11_)
  );
  XNOR2_X1 _58_ (
    .A(_23_),
    .B(_25_),
    .ZN(_12_)
  );
  XNOR2_X1 _59_ (
    .A(_26_),
    .B(_28_),
    .ZN(_13_)
  );
  assign C[3] = Cout;
  assign _07_ = B[3];
  assign _03_ = A[3];
  assign _06_ = B[2];
  assign _02_ = A[2];
  assign _05_ = B[1];
  assign _01_ = A[1];
  assign _04_ = B[0];
  assign _00_ = A[0];
  assign _08_ = Cin;
  assign Cout = _09_;
  assign Sum[0] = _10_;
  assign Sum[1] = _11_;
  assign Sum[2] = _12_;
  assign Sum[3] = _13_;
endmodule

module Exact_42(a, b, c, d, CIN, S, C, COUT);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  output C;
  input CIN;
  output COUT;
  output S;
  input a;
  input b;
  input c;
  input d;
  INV_X1 _18_ (
    .A(_01_),
    .ZN(_14_)
  );
  NAND2_X1 _19_ (
    .A1(_05_),
    .A2(_04_),
    .ZN(_08_)
  );
  XOR2_X1 _20_ (
    .A(_05_),
    .B(_04_),
    .Z(_09_)
  );
  NAND2_X1 _21_ (
    .A1(_06_),
    .A2(_09_),
    .ZN(_10_)
  );
  XOR2_X1 _22_ (
    .A(_06_),
    .B(_09_),
    .Z(_11_)
  );
  NAND2_X1 _23_ (
    .A1(_07_),
    .A2(_11_),
    .ZN(_12_)
  );
  XNOR2_X1 _24_ (
    .A(_07_),
    .B(_11_),
    .ZN(_13_)
  );
  XNOR2_X1 _25_ (
    .A(_01_),
    .B(_13_),
    .ZN(_03_)
  );
  NAND2_X1 _26_ (
    .A1(_08_),
    .A2(_10_),
    .ZN(_02_)
  );
  OAI21_X1 _27_ (
    .A(_12_),
    .B1(_13_),
    .B2(_14_),
    .ZN(_00_)
  );
  assign _05_ = b;
  assign _04_ = a;
  assign _06_ = c;
  assign _07_ = d;
  assign _01_ = CIN;
  assign S = _03_;
  assign COUT = _02_;
  assign C = _00_;
endmodule

module Full_adder(a, b, CIN, S, C);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  output C;
  input CIN;
  output S;
  input a;
  input b;
  INV_X1 _12_ (
    .A(_01_),
    .ZN(_05_)
  );
  NAND3_X1 _13_ (
    .A1(_04_),
    .A2(_03_),
    .A3(_01_),
    .ZN(_06_)
  );
  NOR2_X1 _14_ (
    .A1(_04_),
    .A2(_03_),
    .ZN(_07_)
  );
  AOI21_X1 _15_ (
    .A(_01_),
    .B1(_03_),
    .B2(_04_),
    .ZN(_08_)
  );
  NOR2_X1 _16_ (
    .A1(_07_),
    .A2(_08_),
    .ZN(_00_)
  );
  AOI22_X1 _17_ (
    .A1(_05_),
    .A2(_07_),
    .B1(_00_),
    .B2(_06_),
    .ZN(_02_)
  );
  assign _04_ = b;
  assign _03_ = a;
  assign _01_ = CIN;
  assign S = _02_;
  assign C = _00_;
endmodule

module Half_adder(a, b, S, C);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  output C;
  output S;
  input a;
  input b;
  AND2_X1 _4_ (
    .A1(_3_),
    .A2(_2_),
    .ZN(_0_)
  );
  XOR2_X1 _5_ (
    .A(_3_),
    .B(_2_),
    .Z(_1_)
  );
  assign _3_ = b;
  assign _2_ = a;
  assign S = _1_;
  assign C = _0_;
endmodule

module STAGE1(A, B, pp_0, pp_1, pp_2, pp_3, pp_4, pp_5, pp_6, pp_7, pp_8, pp_9, pp_10, pp_11, pp_12, pp_13, pp_14);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  input [7:0] A;
  input [7:0] B;
  output pp_0;
  output [1:0] pp_1;
  output [3:0] pp_10;
  wire pp_10_exa_c1;
  wire pp_10_exa_c2;
  wire pp_10_exa_s;
  output [3:0] pp_11;
  wire pp_11_exa_c;
  wire pp_11_exa_s;
  output [3:0] pp_12;
  output [1:0] pp_13;
  output pp_14;
  output [2:0] pp_2;
  output [3:0] pp_3;
  output [3:0] pp_4;
  wire pp_4_c;
  wire pp_4_s;
  output [3:0] pp_5;
  wire pp_5_c;
  wire pp_5_s;
  output [3:0] pp_6;
  wire pp_6_exa_c;
  wire pp_6_exa_s;
  wire pp_6_pro_c;
  wire pp_6_pro_s;
  output [3:0] pp_7;
  wire pp_7_pro_c1;
  wire pp_7_pro_c2;
  wire pp_7_pro_s1;
  wire pp_7_pro_s2;
  output [3:0] pp_8;
  wire pp_8_exa_c1;
  wire pp_8_exa_c21;
  wire pp_8_exa_c22;
  wire pp_8_exa_s1;
  wire pp_8_exa_s2;
  output [3:0] pp_9;
  wire pp_9_exa_c1;
  wire pp_9_exa_c21;
  wire pp_9_exa_c22;
  wire pp_9_exa_s1;
  wire pp_9_exa_s2;
  AND2_X1 _119_ (
    .A1(_008_),
    .A2(_000_),
    .ZN(_055_)
  );
  AND2_X1 _120_ (
    .A1(_008_),
    .A2(_001_),
    .ZN(_065_)
  );
  AND2_X1 _121_ (
    .A1(_000_),
    .A2(_009_),
    .ZN(_066_)
  );
  AND2_X1 _122_ (
    .A1(_008_),
    .A2(_002_),
    .ZN(_067_)
  );
  AND2_X1 _123_ (
    .A1(_001_),
    .A2(_009_),
    .ZN(_068_)
  );
  AND2_X1 _124_ (
    .A1(_000_),
    .A2(_010_),
    .ZN(_069_)
  );
  AND2_X1 _125_ (
    .A1(_008_),
    .A2(_003_),
    .ZN(_070_)
  );
  AND2_X1 _126_ (
    .A1(_009_),
    .A2(_002_),
    .ZN(_071_)
  );
  AND2_X1 _127_ (
    .A1(_001_),
    .A2(_010_),
    .ZN(_072_)
  );
  AND2_X1 _128_ (
    .A1(_000_),
    .A2(_011_),
    .ZN(_073_)
  );
  AND2_X1 _129_ (
    .A1(_002_),
    .A2(_010_),
    .ZN(_074_)
  );
  AND2_X1 _130_ (
    .A1(_001_),
    .A2(_011_),
    .ZN(_075_)
  );
  AND2_X1 _131_ (
    .A1(_000_),
    .A2(_012_),
    .ZN(_076_)
  );
  AND2_X1 _132_ (
    .A1(_001_),
    .A2(_012_),
    .ZN(_077_)
  );
  AND2_X1 _133_ (
    .A1(_000_),
    .A2(_013_),
    .ZN(_078_)
  );
  AND2_X1 _134_ (
    .A1(_000_),
    .A2(_014_),
    .ZN(_079_)
  );
  AND2_X1 _135_ (
    .A1(_003_),
    .A2(_015_),
    .ZN(_056_)
  );
  AND2_X1 _136_ (
    .A1(_014_),
    .A2(_005_),
    .ZN(_057_)
  );
  AND2_X1 _137_ (
    .A1(_015_),
    .A2(_004_),
    .ZN(_058_)
  );
  AND2_X1 _138_ (
    .A1(_013_),
    .A2(_007_),
    .ZN(_059_)
  );
  AND2_X1 _139_ (
    .A1(_014_),
    .A2(_006_),
    .ZN(_060_)
  );
  AND2_X1 _140_ (
    .A1(_015_),
    .A2(_005_),
    .ZN(_061_)
  );
  AND2_X1 _141_ (
    .A1(_014_),
    .A2(_007_),
    .ZN(_062_)
  );
  AND2_X1 _142_ (
    .A1(_015_),
    .A2(_006_),
    .ZN(_063_)
  );
  AND2_X1 _143_ (
    .A1(_015_),
    .A2(_007_),
    .ZN(_064_)
  );
  AND2_X1 _144_ (
    .A1(_008_),
    .A2(_004_),
    .ZN(_016_)
  );
  AND2_X1 _145_ (
    .A1(_009_),
    .A2(_003_),
    .ZN(_017_)
  );
  AND2_X1 _146_ (
    .A1(_008_),
    .A2(_005_),
    .ZN(_018_)
  );
  AND2_X1 _147_ (
    .A1(_009_),
    .A2(_004_),
    .ZN(_019_)
  );
  AND2_X1 _148_ (
    .A1(_010_),
    .A2(_003_),
    .ZN(_020_)
  );
  AND2_X1 _149_ (
    .A1(_002_),
    .A2(_011_),
    .ZN(_021_)
  );
  AND2_X1 _150_ (
    .A1(_008_),
    .A2(_006_),
    .ZN(_022_)
  );
  AND2_X1 _151_ (
    .A1(_009_),
    .A2(_005_),
    .ZN(_023_)
  );
  AND2_X1 _152_ (
    .A1(_010_),
    .A2(_004_),
    .ZN(_024_)
  );
  AND2_X1 _153_ (
    .A1(_003_),
    .A2(_011_),
    .ZN(_025_)
  );
  AND2_X1 _154_ (
    .A1(_001_),
    .A2(_013_),
    .ZN(_026_)
  );
  AND2_X1 _155_ (
    .A1(_002_),
    .A2(_012_),
    .ZN(_027_)
  );
  AND2_X1 _156_ (
    .A1(_000_),
    .A2(_015_),
    .ZN(_028_)
  );
  AND2_X1 _157_ (
    .A1(_001_),
    .A2(_014_),
    .ZN(_029_)
  );
  AND2_X1 _158_ (
    .A1(_002_),
    .A2(_013_),
    .ZN(_030_)
  );
  AND2_X1 _159_ (
    .A1(_003_),
    .A2(_012_),
    .ZN(_031_)
  );
  AND2_X1 _160_ (
    .A1(_011_),
    .A2(_004_),
    .ZN(_032_)
  );
  AND2_X1 _161_ (
    .A1(_010_),
    .A2(_005_),
    .ZN(_033_)
  );
  AND2_X1 _162_ (
    .A1(_009_),
    .A2(_006_),
    .ZN(_034_)
  );
  AND2_X1 _163_ (
    .A1(_008_),
    .A2(_007_),
    .ZN(_035_)
  );
  AND2_X1 _164_ (
    .A1(_001_),
    .A2(_015_),
    .ZN(_036_)
  );
  AND2_X1 _165_ (
    .A1(_002_),
    .A2(_014_),
    .ZN(_037_)
  );
  AND2_X1 _166_ (
    .A1(_003_),
    .A2(_013_),
    .ZN(_038_)
  );
  AND2_X1 _167_ (
    .A1(_012_),
    .A2(_004_),
    .ZN(_039_)
  );
  AND2_X1 _168_ (
    .A1(_011_),
    .A2(_005_),
    .ZN(_040_)
  );
  AND2_X1 _169_ (
    .A1(_010_),
    .A2(_006_),
    .ZN(_041_)
  );
  AND2_X1 _170_ (
    .A1(_009_),
    .A2(_007_),
    .ZN(_042_)
  );
  AND2_X1 _171_ (
    .A1(_002_),
    .A2(_015_),
    .ZN(_043_)
  );
  AND2_X1 _172_ (
    .A1(_003_),
    .A2(_014_),
    .ZN(_044_)
  );
  AND2_X1 _173_ (
    .A1(_013_),
    .A2(_004_),
    .ZN(_045_)
  );
  AND2_X1 _174_ (
    .A1(_012_),
    .A2(_005_),
    .ZN(_046_)
  );
  AND2_X1 _175_ (
    .A1(_011_),
    .A2(_006_),
    .ZN(_047_)
  );
  AND2_X1 _176_ (
    .A1(_010_),
    .A2(_007_),
    .ZN(_048_)
  );
  AND2_X1 _177_ (
    .A1(_014_),
    .A2(_004_),
    .ZN(_049_)
  );
  AND2_X1 _178_ (
    .A1(_013_),
    .A2(_005_),
    .ZN(_050_)
  );
  AND2_X1 _179_ (
    .A1(_012_),
    .A2(_006_),
    .ZN(_051_)
  );
  AND2_X1 _180_ (
    .A1(_011_),
    .A2(_007_),
    .ZN(_052_)
  );
  AND2_X1 _181_ (
    .A1(_013_),
    .A2(_006_),
    .ZN(_053_)
  );
  AND2_X1 _182_ (
    .A1(_012_),
    .A2(_007_),
    .ZN(_054_)
  );
  ACCI1 ACCI1_pp_5 (
    .C(pp_5_c),
    .S(pp_5_s),
    .a(_082_),
    .b(_083_),
    .c(_084_),
    .d(_085_)
  );
  ACCI1 ACCI1_pp_6 (
    .C(pp_6_pro_c),
    .S(pp_6_pro_s),
    .a(_086_),
    .b(_087_),
    .c(_088_),
    .d(_089_)
  );
  ACCI1 ACCI1_pp_7_1 (
    .C(pp_7_pro_c1),
    .S(pp_7_pro_s1),
    .a(_092_),
    .b(_093_),
    .c(_094_),
    .d(_095_)
  );
  ACCI1 ACCI1_pp_7_2 (
    .C(pp_7_pro_c2),
    .S(pp_7_pro_s2),
    .a(_096_),
    .b(_097_),
    .c(_098_),
    .d(_099_)
  );
  Exact_42 Exact_42_pp_10 (
    .C(pp_10_exa_c1),
    .CIN(pp_9_exa_c22),
    .COUT(pp_10_exa_c2),
    .S(pp_10_exa_s),
    .a(_113_),
    .b(_114_),
    .c(_115_),
    .d(_116_)
  );
  Exact_42 Exact_42_pp_8 (
    .C(pp_8_exa_c21),
    .CIN(1'h0),
    .COUT(pp_8_exa_c22),
    .S(pp_8_exa_s2),
    .a(_103_),
    .b(_104_),
    .c(_105_),
    .d(_106_)
  );
  Exact_42 Exact_42_pp_9 (
    .C(pp_9_exa_c21),
    .CIN(pp_8_exa_c22),
    .COUT(pp_9_exa_c22),
    .S(pp_9_exa_s2),
    .a(_109_),
    .b(_110_),
    .c(_111_),
    .d(_112_)
  );
  Full_adder Full_adder_pp_11 (
    .C(pp_11_exa_c),
    .CIN(pp_10_exa_c2),
    .S(pp_11_exa_s),
    .a(_117_),
    .b(_118_)
  );
  Full_adder Full_adder_pp_8 (
    .C(pp_8_exa_c1),
    .CIN(_102_),
    .S(pp_8_exa_s1),
    .a(_100_),
    .b(_101_)
  );
  Half_adder Half_adder_pp_4 (
    .C(pp_4_c),
    .S(pp_4_s),
    .a(_080_),
    .b(_081_)
  );
  Half_adder Half_adder_pp_6 (
    .C(pp_6_exa_c),
    .S(pp_6_exa_s),
    .a(_090_),
    .b(_091_)
  );
  Half_adder Half_adder_pp_9 (
    .C(pp_9_exa_c1),
    .S(pp_9_exa_s1),
    .a(_107_),
    .b(_108_)
  );
  assign pp_10[2:0] = { pp_10_exa_s, pp_9_exa_c21, pp_9_exa_c1 };
  assign pp_11[1:0] = { pp_11_exa_s, pp_10_exa_c1 };
  assign pp_12[0] = pp_11_exa_c;
  assign pp_4[0] = pp_4_s;
  assign pp_5[1:0] = { pp_5_s, pp_4_c };
  assign pp_6[2:0] = { pp_6_exa_s, pp_6_pro_s, pp_5_c };
  assign pp_7 = { pp_7_pro_s1, pp_7_pro_s2, pp_6_exa_c, pp_6_pro_c };
  assign pp_8 = { pp_8_exa_s1, pp_8_exa_s2, pp_7_pro_c2, pp_7_pro_c1 };
  assign pp_9 = { pp_9_exa_s1, pp_9_exa_s2, pp_8_exa_c21, pp_8_exa_c1 };
  assign _008_ = B[0];
  assign _000_ = A[0];
  assign pp_0 = _055_;
  assign _001_ = A[1];
  assign pp_1[0] = _065_;
  assign _009_ = B[1];
  assign pp_1[1] = _066_;
  assign _002_ = A[2];
  assign pp_2[0] = _067_;
  assign pp_2[1] = _068_;
  assign _010_ = B[2];
  assign pp_2[2] = _069_;
  assign _003_ = A[3];
  assign pp_3[0] = _070_;
  assign pp_3[1] = _071_;
  assign pp_3[2] = _072_;
  assign _011_ = B[3];
  assign pp_3[3] = _073_;
  assign pp_4[1] = _074_;
  assign pp_4[2] = _075_;
  assign _012_ = B[4];
  assign pp_4[3] = _076_;
  assign pp_5[2] = _077_;
  assign _013_ = B[5];
  assign pp_5[3] = _078_;
  assign _014_ = B[6];
  assign pp_6[3] = _079_;
  assign _015_ = B[7];
  assign pp_10[3] = _056_;
  assign _005_ = A[5];
  assign pp_11[2] = _057_;
  assign _004_ = A[4];
  assign pp_11[3] = _058_;
  assign _007_ = A[7];
  assign pp_12[1] = _059_;
  assign _006_ = A[6];
  assign pp_12[2] = _060_;
  assign pp_12[3] = _061_;
  assign pp_13[0] = _062_;
  assign pp_13[1] = _063_;
  assign pp_14 = _064_;
  assign _080_ = _016_;
  assign _081_ = _017_;
  assign _082_ = _018_;
  assign _083_ = _019_;
  assign _084_ = _020_;
  assign _085_ = _021_;
  assign _086_ = _022_;
  assign _087_ = _023_;
  assign _088_ = _024_;
  assign _089_ = _025_;
  assign _090_ = _026_;
  assign _091_ = _027_;
  assign _092_ = _028_;
  assign _093_ = _029_;
  assign _094_ = _030_;
  assign _095_ = _031_;
  assign _096_ = _032_;
  assign _097_ = _033_;
  assign _098_ = _034_;
  assign _099_ = _035_;
  assign _100_ = _036_;
  assign _101_ = _037_;
  assign _102_ = _038_;
  assign _103_ = _039_;
  assign _104_ = _040_;
  assign _105_ = _041_;
  assign _106_ = _042_;
  assign _107_ = _043_;
  assign _108_ = _044_;
  assign _109_ = _045_;
  assign _110_ = _046_;
  assign _111_ = _047_;
  assign _112_ = _048_;
  assign _113_ = _049_;
  assign _114_ = _050_;
  assign _115_ = _051_;
  assign _116_ = _052_;
  assign _117_ = _053_;
  assign _118_ = _054_;
endmodule

module STAGE2(pp_0, pp_1, pp_2, pp_3, pp_4, pp_5, pp_6, pp_7, pp_8, pp_9, pp_10, pp_11, pp_12, pp_13, pp_14, approx);
  wire [14:0] A;
  wire [14:0] B;
  output [15:0] approx;
  input pp_0;
  input [1:0] pp_1;
  input [3:0] pp_10;
  wire pp_10_exa_c1;
  wire pp_10_exa_c2;
  wire pp_10_exa_s;
  input [3:0] pp_11;
  wire pp_11_exa_c1;
  wire pp_11_exa_c2;
  wire pp_11_exa_s;
  input [3:0] pp_12;
  wire pp_12_exa_c1;
  wire pp_12_exa_c2;
  wire pp_12_exa_s;
  input [1:0] pp_13;
  wire pp_13_exa_c;
  wire pp_13_exa_s;
  input pp_14;
  input [2:0] pp_2;
  wire pp_2_exa_c;
  wire pp_2_exa_s;
  input [3:0] pp_3;
  wire pp_3_pro_c;
  wire pp_3_pro_s;
  input [3:0] pp_4;
  wire pp_4_pro_c;
  wire pp_4_pro_s;
  input [3:0] pp_5;
  wire pp_5_pro_c;
  wire pp_5_pro_s;
  input [3:0] pp_6;
  wire pp_6_pro_c;
  wire pp_6_pro_s;
  input [3:0] pp_7;
  wire pp_7_pro_c;
  wire pp_7_pro_s;
  input [3:0] pp_8;
  wire pp_8_exa_c1;
  wire pp_8_exa_c2;
  wire pp_8_exa_s;
  input [3:0] pp_9;
  wire pp_9_exa_c1;
  wire pp_9_exa_c2;
  wire pp_9_exa_s;
  ACCI1 ACCI1_pp_3 (
    .C(pp_3_pro_c),
    .S(pp_3_pro_s),
    .a(pp_3[0]),
    .b(pp_3[1]),
    .c(pp_3[2]),
    .d(pp_3[3])
  );
  ACCI1 ACCI1_pp_4 (
    .C(pp_4_pro_c),
    .S(pp_4_pro_s),
    .a(pp_4[0]),
    .b(pp_4[1]),
    .c(pp_4[2]),
    .d(pp_4[3])
  );
  ACCI1 ACCI1_pp_5 (
    .C(pp_5_pro_c),
    .S(pp_5_pro_s),
    .a(pp_5[0]),
    .b(pp_5[1]),
    .c(pp_5[2]),
    .d(pp_5[3])
  );
  ACCI1 ACCI1_pp_6 (
    .C(pp_6_pro_c),
    .S(pp_6_pro_s),
    .a(pp_6[0]),
    .b(pp_6[1]),
    .c(pp_6[2]),
    .d(pp_6[3])
  );
  ACCI1 ACCI1_pp_7 (
    .C(pp_7_pro_c),
    .S(pp_7_pro_s),
    .a(pp_7[0]),
    .b(pp_7[1]),
    .c(pp_7[2]),
    .d(pp_7[3])
  );
  Exact_42 Exact_42_pp_10 (
    .C(pp_10_exa_c1),
    .CIN(pp_9_exa_c2),
    .COUT(pp_10_exa_c2),
    .S(pp_10_exa_s),
    .a(pp_10[3]),
    .b(pp_10[2]),
    .c(pp_10[1]),
    .d(pp_10[0])
  );
  Exact_42 Exact_42_pp_11 (
    .C(pp_11_exa_c1),
    .CIN(pp_10_exa_c2),
    .COUT(pp_11_exa_c2),
    .S(pp_11_exa_s),
    .a(pp_11[3]),
    .b(pp_11[2]),
    .c(pp_11[1]),
    .d(pp_11[0])
  );
  Exact_42 Exact_42_pp_12 (
    .C(pp_12_exa_c1),
    .CIN(pp_11_exa_c2),
    .COUT(pp_12_exa_c2),
    .S(pp_12_exa_s),
    .a(pp_12[3]),
    .b(pp_12[2]),
    .c(pp_12[1]),
    .d(pp_12[0])
  );
  Exact_42 Exact_42_pp_8 (
    .C(pp_8_exa_c1),
    .CIN(1'h0),
    .COUT(pp_8_exa_c2),
    .S(pp_8_exa_s),
    .a(pp_8[3]),
    .b(pp_8[2]),
    .c(pp_8[1]),
    .d(pp_8[0])
  );
  Exact_42 Exact_42_pp_9 (
    .C(pp_9_exa_c1),
    .CIN(pp_8_exa_c2),
    .COUT(pp_9_exa_c2),
    .S(pp_9_exa_s),
    .a(pp_9[3]),
    .b(pp_9[2]),
    .c(pp_9[1]),
    .d(pp_9[0])
  );
  CLA16bit Final_add (
    .A({ 1'h0, pp_14, pp_13_exa_s, pp_12_exa_s, pp_11_exa_s, pp_10_exa_s, pp_9_exa_s, pp_8_exa_s, pp_7_pro_s, pp_6_pro_s, pp_5_pro_s, pp_4_pro_s, pp_3_pro_s, pp_2_exa_s, pp_1[0], pp_0 }),
    .B({ 1'h0, pp_13_exa_c, pp_12_exa_c1, pp_11_exa_c1, pp_10_exa_c1, pp_9_exa_c1, pp_8_exa_c1, pp_7_pro_c, pp_6_pro_c, pp_5_pro_c, pp_4_pro_c, pp_3_pro_c, pp_2_exa_c, pp_2[2], pp_1[1], 1'h0 }),
    .Cin(1'h0),
    .Cout(),
    .Sum(approx)
  );
  Full_adder Full_adder_pp_13 (
    .C(pp_13_exa_c),
    .CIN(pp_12_exa_c2),
    .S(pp_13_exa_s),
    .a(pp_13[1]),
    .b(pp_13[0])
  );
  Half_adder Half_adder_pp_2 (
    .C(pp_2_exa_c),
    .S(pp_2_exa_s),
    .a(pp_2[0]),
    .b(pp_2[1])
  );
  assign A = { pp_14, pp_13_exa_s, pp_12_exa_s, pp_11_exa_s, pp_10_exa_s, pp_9_exa_s, pp_8_exa_s, pp_7_pro_s, pp_6_pro_s, pp_5_pro_s, pp_4_pro_s, pp_3_pro_s, pp_2_exa_s, pp_1[0], pp_0 };
  assign B = { pp_13_exa_c, pp_12_exa_c1, pp_11_exa_c1, pp_10_exa_c1, pp_9_exa_c1, pp_8_exa_c1, pp_7_pro_c, pp_6_pro_c, pp_5_pro_c, pp_4_pro_c, pp_3_pro_c, pp_2_exa_c, pp_2[2], pp_1[1], 1'h0 };
endmodule

module sram_multiplier_system(clk, rst_n, pe_ce, init_enable, data_in, data_out, init_done, valid_out);
  wire [3:0] _000_;
  wire [7:0] _001_;
  wire [15:0] _002_;
  wire [3:0] _003_;
  wire [7:0] _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire [3:0] addr_ptr;
  input clk;
  wire [2:0] curr_state;
  input [7:0] data_in;
  wire [7:0] data_in_reg;
  output [15:0] data_out;
  wire [3:0] init_count;
  output init_done;
  input init_enable;
  input pe_ce;
  wire [15:0] product;
  input rst_n;
  wire [3:0] sram_addr;
  wire [7:0] sram_rdata;
  wire [7:0] sram_rdata_reg;
  output valid_out;
  wire valid_reg_out;
  INV_X1 _275_ (
    .A(_114_),
    .ZN(_050_)
  );
  INV_X1 _276_ (
    .A(_078_),
    .ZN(_081_)
  );
  INV_X1 _277_ (
    .A(_055_),
    .ZN(_082_)
  );
  AND2_X1 _278_ (
    .A1(_131_),
    .A2(_066_),
    .ZN(_046_)
  );
  INV_X1 _279_ (
    .A(_046_),
    .ZN(_083_)
  );
  AND2_X1 _280_ (
    .A1(_118_),
    .A2(_046_),
    .ZN(_021_)
  );
  AND2_X1 _281_ (
    .A1(_119_),
    .A2(_046_),
    .ZN(_022_)
  );
  AND2_X1 _282_ (
    .A1(_120_),
    .A2(_046_),
    .ZN(_023_)
  );
  AND2_X1 _283_ (
    .A1(_121_),
    .A2(_046_),
    .ZN(_024_)
  );
  AND2_X1 _284_ (
    .A1(_131_),
    .A2(_068_),
    .ZN(_010_)
  );
  AND2_X1 _285_ (
    .A1(_131_),
    .A2(_069_),
    .ZN(_011_)
  );
  AND2_X1 _286_ (
    .A1(_131_),
    .A2(_070_),
    .ZN(_012_)
  );
  AND2_X1 _287_ (
    .A1(_131_),
    .A2(_071_),
    .ZN(_013_)
  );
  AND2_X1 _288_ (
    .A1(_131_),
    .A2(_072_),
    .ZN(_014_)
  );
  AND2_X1 _289_ (
    .A1(_131_),
    .A2(_073_),
    .ZN(_015_)
  );
  AND2_X1 _290_ (
    .A1(_131_),
    .A2(_074_),
    .ZN(_016_)
  );
  AND2_X1 _291_ (
    .A1(_131_),
    .A2(_075_),
    .ZN(_017_)
  );
  NAND2_X1 _292_ (
    .A1(_078_),
    .A2(_079_),
    .ZN(_084_)
  );
  OAI21_X1 _293_ (
    .A(_076_),
    .B1(_062_),
    .B2(_084_),
    .ZN(_085_)
  );
  AND2_X1 _294_ (
    .A1(_131_),
    .A2(_114_),
    .ZN(_086_)
  );
  NAND2_X1 _295_ (
    .A1(_131_),
    .A2(_067_),
    .ZN(_051_)
  );
  NOR2_X1 _296_ (
    .A1(_050_),
    .A2(_051_),
    .ZN(_087_)
  );
  INV_X1 _297_ (
    .A(_087_),
    .ZN(_088_)
  );
  AND2_X1 _298_ (
    .A1(_114_),
    .A2(_046_),
    .ZN(_089_)
  );
  NAND2_X1 _299_ (
    .A1(_114_),
    .A2(_046_),
    .ZN(_090_)
  );
  NAND2_X1 _300_ (
    .A1(_131_),
    .A2(_050_),
    .ZN(_091_)
  );
  AOI22_X1 _301_ (
    .A1(_085_),
    .A2(_087_),
    .B1(_089_),
    .B2(_076_),
    .ZN(_092_)
  );
  OAI21_X1 _302_ (
    .A(_092_),
    .B1(_091_),
    .B2(_061_),
    .ZN(_034_)
  );
  NAND2_X1 _303_ (
    .A1(_076_),
    .A2(_077_),
    .ZN(_093_)
  );
  NAND3_X1 _304_ (
    .A1(_076_),
    .A2(_077_),
    .A3(_084_),
    .ZN(_094_)
  );
  AOI22_X1 _305_ (
    .A1(_066_),
    .A2(_077_),
    .B1(_067_),
    .B2(_094_),
    .ZN(_095_)
  );
  OAI21_X1 _306_ (
    .A(_086_),
    .B1(_077_),
    .B2(_076_),
    .ZN(_096_)
  );
  OAI22_X1 _307_ (
    .A1(_062_),
    .A2(_091_),
    .B1(_095_),
    .B2(_096_),
    .ZN(_035_)
  );
  NAND2_X1 _308_ (
    .A1(_081_),
    .A2(_093_),
    .ZN(_097_)
  );
  OAI211_X1 _309_ (
    .A(_087_),
    .B(_097_),
    .C1(_094_),
    .C2(_081_),
    .ZN(_098_)
  );
  OAI221_X1 _310_ (
    .A(_098_),
    .B1(_091_),
    .B2(_063_),
    .C1(_081_),
    .C2(_090_),
    .ZN(_036_)
  );
  OAI21_X1 _311_ (
    .A(_064_),
    .B1(_093_),
    .B2(_063_),
    .ZN(_099_)
  );
  AOI22_X1 _312_ (
    .A1(_079_),
    .A2(_089_),
    .B1(_099_),
    .B2(_087_),
    .ZN(_100_)
  );
  OAI21_X1 _313_ (
    .A(_100_),
    .B1(_091_),
    .B2(_064_),
    .ZN(_037_)
  );
  NAND4_X1 _314_ (
    .A1(_076_),
    .A2(_077_),
    .A3(_078_),
    .A4(_079_),
    .ZN(_101_)
  );
  NAND3_X1 _315_ (
    .A1(_057_),
    .A2(_087_),
    .A3(_101_),
    .ZN(_102_)
  );
  OAI221_X1 _316_ (
    .A(_102_),
    .B1(_091_),
    .B2(_057_),
    .C1(_052_),
    .C2(_090_),
    .ZN(_006_)
  );
  AOI21_X1 _317_ (
    .A(_089_),
    .B1(_101_),
    .B2(_087_),
    .ZN(_103_)
  );
  NAND2_X1 _318_ (
    .A1(_052_),
    .A2(_053_),
    .ZN(_104_)
  );
  XNOR2_X1 _319_ (
    .A(_052_),
    .B(_053_),
    .ZN(_105_)
  );
  OAI22_X1 _320_ (
    .A1(_058_),
    .A2(_091_),
    .B1(_103_),
    .B2(_105_),
    .ZN(_007_)
  );
  XOR2_X1 _321_ (
    .A(_054_),
    .B(_104_),
    .Z(_106_)
  );
  OAI22_X1 _322_ (
    .A1(_059_),
    .A2(_091_),
    .B1(_103_),
    .B2(_106_),
    .ZN(_008_)
  );
  AOI21_X1 _323_ (
    .A(_082_),
    .B1(_101_),
    .B2(_067_),
    .ZN(_107_)
  );
  NAND4_X1 _324_ (
    .A1(_114_),
    .A2(_052_),
    .A3(_053_),
    .A4(_054_),
    .ZN(_108_)
  );
  OR2_X1 _325_ (
    .A1(_107_),
    .A2(_108_),
    .ZN(_109_)
  );
  AOI211_X1 _326_ (
    .A(_066_),
    .B(_050_),
    .C1(_067_),
    .C2(_101_),
    .ZN(_110_)
  );
  OAI21_X1 _327_ (
    .A(_131_),
    .B1(_060_),
    .B2(_108_),
    .ZN(_111_)
  );
  AOI211_X1 _328_ (
    .A(_110_),
    .B(_111_),
    .C1(_060_),
    .C2(_109_),
    .ZN(_009_)
  );
  NOR2_X1 _329_ (
    .A1(_050_),
    .A2(_101_),
    .ZN(_112_)
  );
  OAI21_X1 _330_ (
    .A(_083_),
    .B1(_088_),
    .B2(_101_),
    .ZN(_048_)
  );
  NAND3_X1 _331_ (
    .A1(_080_),
    .A2(_065_),
    .A3(_086_),
    .ZN(_113_)
  );
  OAI21_X1 _332_ (
    .A(_113_),
    .B1(_112_),
    .B2(_051_),
    .ZN(_049_)
  );
  AOI22_X1 _333_ (
    .A1(_131_),
    .A2(_056_),
    .B1(_086_),
    .B2(_080_),
    .ZN(_047_)
  );
  AND2_X1 _334_ (
    .A1(_131_),
    .A2(_132_),
    .ZN(_038_)
  );
  AND2_X1 _335_ (
    .A1(_131_),
    .A2(_133_),
    .ZN(_039_)
  );
  AND2_X1 _336_ (
    .A1(_131_),
    .A2(_134_),
    .ZN(_040_)
  );
  AND2_X1 _337_ (
    .A1(_131_),
    .A2(_135_),
    .ZN(_041_)
  );
  AND2_X1 _338_ (
    .A1(_131_),
    .A2(_136_),
    .ZN(_042_)
  );
  AND2_X1 _339_ (
    .A1(_131_),
    .A2(_137_),
    .ZN(_043_)
  );
  AND2_X1 _340_ (
    .A1(_131_),
    .A2(_138_),
    .ZN(_044_)
  );
  AND2_X1 _341_ (
    .A1(_131_),
    .A2(_139_),
    .ZN(_045_)
  );
  AND2_X1 _342_ (
    .A1(_115_),
    .A2(_046_),
    .ZN(_018_)
  );
  AND2_X1 _343_ (
    .A1(_122_),
    .A2(_046_),
    .ZN(_025_)
  );
  AND2_X1 _344_ (
    .A1(_123_),
    .A2(_046_),
    .ZN(_026_)
  );
  AND2_X1 _345_ (
    .A1(_124_),
    .A2(_046_),
    .ZN(_027_)
  );
  AND2_X1 _346_ (
    .A1(_125_),
    .A2(_046_),
    .ZN(_028_)
  );
  AND2_X1 _347_ (
    .A1(_126_),
    .A2(_046_),
    .ZN(_029_)
  );
  AND2_X1 _348_ (
    .A1(_127_),
    .A2(_046_),
    .ZN(_030_)
  );
  AND2_X1 _349_ (
    .A1(_128_),
    .A2(_046_),
    .ZN(_031_)
  );
  AND2_X1 _350_ (
    .A1(_129_),
    .A2(_046_),
    .ZN(_032_)
  );
  AND2_X1 _351_ (
    .A1(_130_),
    .A2(_046_),
    .ZN(_033_)
  );
  AND2_X1 _352_ (
    .A1(_116_),
    .A2(_046_),
    .ZN(_019_)
  );
  AND2_X1 _353_ (
    .A1(_117_),
    .A2(_046_),
    .ZN(_020_)
  );
  DFF_X1 _354_ (
    .CK(clk),
    .D(_140_),
    .Q(curr_state[0]),
    .QN(_222_)
  );
  DFF_X1 _355_ (
    .CK(clk),
    .D(_141_),
    .Q(curr_state[1]),
    .QN(_223_)
  );
  DFF_X1 _356_ (
    .CK(clk),
    .D(_142_),
    .Q(curr_state[2]),
    .QN(_224_)
  );
  DFF_X1 _357_ (
    .CK(clk),
    .D(_002_[0]),
    .Q(data_out[0]),
    .QN(_225_)
  );
  DFF_X1 _358_ (
    .CK(clk),
    .D(_002_[1]),
    .Q(data_out[1]),
    .QN(_226_)
  );
  DFF_X1 _359_ (
    .CK(clk),
    .D(_002_[2]),
    .Q(data_out[2]),
    .QN(_227_)
  );
  DFF_X1 _360_ (
    .CK(clk),
    .D(_002_[3]),
    .Q(data_out[3]),
    .QN(_228_)
  );
  DFF_X1 _361_ (
    .CK(clk),
    .D(_002_[4]),
    .Q(data_out[4]),
    .QN(_229_)
  );
  DFF_X1 _362_ (
    .CK(clk),
    .D(_002_[5]),
    .Q(data_out[5]),
    .QN(_230_)
  );
  DFF_X1 _363_ (
    .CK(clk),
    .D(_002_[6]),
    .Q(data_out[6]),
    .QN(_231_)
  );
  DFF_X1 _364_ (
    .CK(clk),
    .D(_002_[7]),
    .Q(data_out[7]),
    .QN(_232_)
  );
  DFF_X1 _365_ (
    .CK(clk),
    .D(_002_[8]),
    .Q(data_out[8]),
    .QN(_233_)
  );
  DFF_X1 _366_ (
    .CK(clk),
    .D(_002_[9]),
    .Q(data_out[9]),
    .QN(_234_)
  );
  DFF_X1 _367_ (
    .CK(clk),
    .D(_002_[10]),
    .Q(data_out[10]),
    .QN(_235_)
  );
  DFF_X1 _368_ (
    .CK(clk),
    .D(_002_[11]),
    .Q(data_out[11]),
    .QN(_236_)
  );
  DFF_X1 _369_ (
    .CK(clk),
    .D(_002_[12]),
    .Q(data_out[12]),
    .QN(_237_)
  );
  DFF_X1 _370_ (
    .CK(clk),
    .D(_002_[13]),
    .Q(data_out[13]),
    .QN(_238_)
  );
  DFF_X1 _371_ (
    .CK(clk),
    .D(_002_[14]),
    .Q(data_out[14]),
    .QN(_239_)
  );
  DFF_X1 _372_ (
    .CK(clk),
    .D(_002_[15]),
    .Q(data_out[15]),
    .QN(_240_)
  );
  DFF_X1 _373_ (
    .CK(clk),
    .D(_001_[0]),
    .Q(data_in_reg[0]),
    .QN(_241_)
  );
  DFF_X1 _374_ (
    .CK(clk),
    .D(_001_[1]),
    .Q(data_in_reg[1]),
    .QN(_242_)
  );
  DFF_X1 _375_ (
    .CK(clk),
    .D(_001_[2]),
    .Q(data_in_reg[2]),
    .QN(_243_)
  );
  DFF_X1 _376_ (
    .CK(clk),
    .D(_001_[3]),
    .Q(data_in_reg[3]),
    .QN(_244_)
  );
  DFF_X1 _377_ (
    .CK(clk),
    .D(_001_[4]),
    .Q(data_in_reg[4]),
    .QN(_245_)
  );
  DFF_X1 _378_ (
    .CK(clk),
    .D(_001_[5]),
    .Q(data_in_reg[5]),
    .QN(_246_)
  );
  DFF_X1 _379_ (
    .CK(clk),
    .D(_001_[6]),
    .Q(data_in_reg[6]),
    .QN(_247_)
  );
  DFF_X1 _380_ (
    .CK(clk),
    .D(_001_[7]),
    .Q(data_in_reg[7]),
    .QN(_248_)
  );
  DFF_X1 _381_ (
    .CK(clk),
    .D(_004_[0]),
    .Q(sram_rdata_reg[0]),
    .QN(_249_)
  );
  DFF_X1 _382_ (
    .CK(clk),
    .D(_004_[1]),
    .Q(sram_rdata_reg[1]),
    .QN(_250_)
  );
  DFF_X1 _383_ (
    .CK(clk),
    .D(_004_[2]),
    .Q(sram_rdata_reg[2]),
    .QN(_251_)
  );
  DFF_X1 _384_ (
    .CK(clk),
    .D(_004_[3]),
    .Q(sram_rdata_reg[3]),
    .QN(_252_)
  );
  DFF_X1 _385_ (
    .CK(clk),
    .D(_004_[4]),
    .Q(sram_rdata_reg[4]),
    .QN(_253_)
  );
  DFF_X1 _386_ (
    .CK(clk),
    .D(_004_[5]),
    .Q(sram_rdata_reg[5]),
    .QN(_254_)
  );
  DFF_X1 _387_ (
    .CK(clk),
    .D(_004_[6]),
    .Q(sram_rdata_reg[6]),
    .QN(_255_)
  );
  DFF_X1 _388_ (
    .CK(clk),
    .D(_004_[7]),
    .Q(sram_rdata_reg[7]),
    .QN(_256_)
  );
  DFF_X1 _389_ (
    .CK(clk),
    .D(_005_),
    .Q(valid_reg_out),
    .QN(_257_)
  );
  DFF_X1 _390_ (
    .CK(clk),
    .D(_000_[0]),
    .Q(addr_ptr[0]),
    .QN(_258_)
  );
  DFF_X1 _391_ (
    .CK(clk),
    .D(_000_[1]),
    .Q(addr_ptr[1]),
    .QN(_259_)
  );
  DFF_X1 _392_ (
    .CK(clk),
    .D(_000_[2]),
    .Q(addr_ptr[2]),
    .QN(_260_)
  );
  DFF_X1 _393_ (
    .CK(clk),
    .D(_000_[3]),
    .Q(addr_ptr[3]),
    .QN(_261_)
  );
  DFF_X1 _394_ (
    .CK(clk),
    .D(_003_[0]),
    .Q(init_count[0]),
    .QN(_262_)
  );
  DFF_X1 _395_ (
    .CK(clk),
    .D(_003_[1]),
    .Q(init_count[1]),
    .QN(_263_)
  );
  DFF_X1 _396_ (
    .CK(clk),
    .D(_003_[2]),
    .Q(init_count[2]),
    .QN(_264_)
  );
  DFF_X1 _397_ (
    .CK(clk),
    .D(_003_[3]),
    .Q(init_count[3]),
    .QN(_265_)
  );
  SRAM_6T_CORE_16x8_MC_TB sram_inst (
    .addr_in(addr_ptr),
    .ce_in(_220_),
    .clk(clk),
    .rd_out(sram_rdata),
    .wd_in(data_in_reg),
    .we_in(_221_)
  );
  Appro4_2_8bit u_multiplier (
    .N1(data_in_reg),
    .N2(sram_rdata_reg),
    .P_APPROX(product)
  );
  assign init_done = curr_state[1];
  assign sram_addr = addr_ptr;
  assign valid_out = valid_reg_out;
  assign _148_ = _222_;
  assign _187_ = _258_;
  assign _195_ = _259_;
  assign _201_ = _260_;
  assign _207_ = _261_;
  assign _167_ = _262_;
  assign _168_ = _263_;
  assign _178_ = _264_;
  assign _183_ = _265_;
  assign _131_ = rst_n;
  assign _002_[12] = _021_;
  assign _119_ = product[13];
  assign _066_ = curr_state[1];
  assign _002_[13] = _022_;
  assign _120_ = product[14];
  assign _002_[14] = _023_;
  assign _121_ = product[15];
  assign _002_[15] = _024_;
  assign _068_ = data_in[0];
  assign _001_[0] = _010_;
  assign _069_ = data_in[1];
  assign _001_[1] = _011_;
  assign _070_ = data_in[2];
  assign _001_[2] = _012_;
  assign _071_ = data_in[3];
  assign _001_[3] = _013_;
  assign _072_ = data_in[4];
  assign _001_[4] = _014_;
  assign _073_ = data_in[5];
  assign _001_[5] = _015_;
  assign _074_ = data_in[6];
  assign _001_[6] = _016_;
  assign _075_ = data_in[7];
  assign _001_[7] = _017_;
  assign _114_ = pe_ce;
  assign _220_ = _050_;
  assign _076_ = init_count[0];
  assign _077_ = init_count[1];
  assign _062_ = _263_;
  assign _067_ = curr_state[2];
  assign _061_ = _262_;
  assign _003_[0] = _034_;
  assign _003_[1] = _035_;
  assign _078_ = init_count[2];
  assign _063_ = _264_;
  assign _003_[2] = _036_;
  assign _079_ = init_count[3];
  assign _064_ = _265_;
  assign _003_[3] = _037_;
  assign _052_ = addr_ptr[0];
  assign _053_ = addr_ptr[1];
  assign _055_ = addr_ptr[3];
  assign _054_ = addr_ptr[2];
  assign _057_ = _258_;
  assign _000_[0] = _006_;
  assign _058_ = _259_;
  assign _000_[1] = _007_;
  assign _059_ = _260_;
  assign _000_[2] = _008_;
  assign _060_ = _261_;
  assign _000_[3] = _009_;
  assign _221_ = _051_;
  assign _005_ = _046_;
  assign _141_ = _048_;
  assign _080_ = init_enable;
  assign _065_ = curr_state[0];
  assign _142_ = _049_;
  assign _056_ = _222_;
  assign _140_ = _047_;
  assign _132_ = sram_rdata[0];
  assign _004_[0] = _038_;
  assign _133_ = sram_rdata[1];
  assign _004_[1] = _039_;
  assign _134_ = sram_rdata[2];
  assign _004_[2] = _040_;
  assign _135_ = sram_rdata[3];
  assign _004_[3] = _041_;
  assign _136_ = sram_rdata[4];
  assign _004_[4] = _042_;
  assign _137_ = sram_rdata[5];
  assign _004_[5] = _043_;
  assign _138_ = sram_rdata[6];
  assign _004_[6] = _044_;
  assign _139_ = sram_rdata[7];
  assign _004_[7] = _045_;
  assign _115_ = product[0];
  assign _002_[0] = _018_;
  assign _122_ = product[1];
  assign _002_[1] = _025_;
  assign _123_ = product[2];
  assign _002_[2] = _026_;
  assign _124_ = product[3];
  assign _002_[3] = _027_;
  assign _125_ = product[4];
  assign _002_[4] = _028_;
  assign _126_ = product[5];
  assign _002_[5] = _029_;
  assign _127_ = product[6];
  assign _002_[6] = _030_;
  assign _128_ = product[7];
  assign _002_[7] = _031_;
  assign _129_ = product[8];
  assign _002_[8] = _032_;
  assign _130_ = product[9];
  assign _002_[9] = _033_;
  assign _116_ = product[10];
  assign _002_[10] = _019_;
  assign _117_ = product[11];
  assign _002_[11] = _020_;
  assign _118_ = product[12];
endmodule
